@startuml Pre-Token Escrow Smart Contract with Position Exit (Simplified)
actor "Position Owner (Exiter)" as Exiter
actor "Position Taker" as Taker
participant "Pre-Token Escrow Smart Contract" as Contract
database "Contract Storage" as Storage

== Creating & Filling Offer (Simplified) ==
note over Contract, Storage: Initial order creation process (simplified)
Contract -> Storage: Create Order Record
note right: Order {id, buyer, seller, amount, price, buyerCollateral, sellerCollateral, status}

== Position Exit Flow ==
group Exit Position Process
    note right: Position owner wants to exit their position
    Exiter -> Contract: createExitPositionOffer(orderID, portion, price, role)
    note right: role=buyer/seller, portion=1-100% of position
    Contract -> Storage: Read Order(orderID)
    Storage --> Contract: Return Order Details
    Contract -> Contract: validateUserPosition(exiter, role)
    
    Contract -> Storage: Create ExitOffer {id, orderID, exiter, role, portion, price}
    Contract --> Exiter: return exitOfferID
    
    alt Exit Offer Filled
        Taker -> Contract: fillExitOffer(exitOfferID, collateral)
        Contract -> Storage: Read ExitOffer(exitOfferID)
        Storage --> Contract: Return ExitOffer Details
        Contract -> Storage: Read Order(exitOffer.orderID)
        Storage --> Contract: Return Order Details
        
        alt Partial Exit (portion < 100%)
            note right: Create child order if partial exit
            Contract -> Storage: Create ChildOrder from original order
            note right: ChildOrder {id, parentID, buyer, seller, amount=original*portion, price, \nbuyerCollateral=original*portion, sellerCollateral=original*portion}
            
            Contract -> Storage: Update ChildOrder.[role] = taker
            Contract -> Taker: lockCollateral(requiredCollateral)
            Contract -> Exiter: transferFunds(price)
            note right: If role=seller, also partialReleaseCollateral(portion)
            
            Contract -> Storage: Update original Order.amount = original*(1-portion)
            Contract -> Storage: Update original Order.buyerCollateral = original*(1-portion)
            Contract -> Storage: Update original Order.sellerCollateral = original*(1-portion)
            
        else Full Exit (portion = 100%)
            Contract -> Storage: Update Order.[role] = taker
            Contract -> Taker: lockCollateral(requiredCollateral)
            Contract -> Exiter: transferFunds(price) + releaseCollateral
        end
        
        Contract -> Storage: Remove ExitOffer(exitOfferID)
        Contract --> Taker: exitOfferFilled(orderID or childOrderID)
        
    else No One Takes Exit Offer
        Exiter -> Contract: cancelExitOffer(exitOfferID)
        Contract -> Storage: Read ExitOffer(exitOfferID)
        Storage --> Contract: Return ExitOffer Details
        Contract -> Contract: validateOfferOwnership(exiter)
        Contract -> Storage: Remove ExitOffer(exitOfferID)
        Contract --> Exiter: exitOfferCancelled()
    end
end

== Optional: Modify Exit Offer ==
group Modify Exit Offer Details
    Exiter -> Contract: updateExitOfferPrice(exitOfferID, newPrice)
    Contract -> Storage: Read ExitOffer(exitOfferID)
    Storage --> Contract: Return ExitOffer Details
    Contract -> Contract: validateOfferOwnership(exiter)
    Contract -> Storage: Update ExitOffer.price = newPrice
    Contract --> Exiter: priceUpdateConfirmed()
end

== At TGE Time (All Orders) ==
note right: All orders (original and child orders) follow this flow
alt Successful Settlement
    note over Contract, Storage: Seller settles the order
    Contract -> Storage: Update Order.status = "settled"
    Contract -> Storage: Record token transfer details
else Settlement Failure
    note over Contract, Storage: Buyer cancels after settlement period
    Contract -> Storage: Update Order.status = "cancelled"
    Contract -> Storage: Record collateral penalties
end

@enduml 