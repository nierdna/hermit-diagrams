@startuml Hermit Withdrawal Flow

' Define actors and components
actor "User" as user
rectangle "Hermit System" {
    component "Fund Contract" as fund
    component "Fund Manager" as fundManager
    collections "Sub Accounts" as subAccounts
    component "Epoch Snapshot Manager" as snapshotManager
    queue "Withdrawal Queue" as withdrawalQueue
    database "User Balances State" as userBalances
    database "Epoch Snapshots" as epochSnapshots
    database "Total Reward State" as totalReward
}

rectangle "Scallop Protocol" {
    collections "Obligations" as obligations
    component "Lending Pool" as lendingPool
}

' Define tokens
card "USDC" as usdc

' Define withdrawal flow
user -right-> fund : "1. Request Withdrawal"
fund -[#red]-> withdrawalQueue : "2. Queue withdrawal request"

' Epoch transition and snapshot
snapshotManager -[#purple]-> userBalances : "3a. Take epoch snapshot\nof user balances"
snapshotManager -[#purple]-> totalReward : "3b. Read total rewards\nat epoch end"
snapshotManager -[#purple]-> epochSnapshots : "3c. Store daily snapshots"

' Process withdrawals after epoch
fund -[#blue]-> lendingPool : "4. Repay borrowed USDC"
obligations -[#blue]-> fund : "5. Withdraw USDC collateral"
fund -[#green]-> user : "6. Send USDC to user\nand resolve withdrawal"

' Fund reallocation
fundManager -[#orange]-> subAccounts : "7a. Re-allocate remaining funds"
subAccounts -[#orange]-> obligations : "7b. Adjust obligations"

' Add notes
note right of withdrawalQueue : "Stores pending withdrawal\nrequests until next epoch"
note bottom of fund : "Processes withdrawals after\nepoch snapshot"
note bottom of fundManager : "Rebalances remaining funds\nacross sub-accounts"
note right of userBalances : "Tracks user balances and\npending withdrawals"
note right of snapshotManager : "Takes daily snapshots of\nsystem state at epoch end"
note right of epochSnapshots : "Stores historical snapshots\nof balances and rewards"

' Style
skinparam rectangle {
    BackgroundColor LightBlue
    BorderColor Black
}

skinparam component {
    BackgroundColor LightGreen
    BorderColor Black
}

skinparam collections {
    BackgroundColor LightYellow
    BorderColor Black
}

skinparam queue {
    BackgroundColor LightGray
    BorderColor Black
}

skinparam card {
    BackgroundColor LightGray
    BorderColor Black
}

skinparam database {
    BackgroundColor LightPink
    BorderColor Black
}

' Arrow colors
skinparam arrow {
    Color Black
}

@enduml
