@startuml Hermit System Architecture

' Define actors and components
actor "User" as user
rectangle "Hermit System" {
    component "Fund Contract" as fund
    component "Fund Manager" as fundManager
    collections "Sub Accounts" as subAccounts
    
    ' Add total states
    database "Total Fund State" as totalFund
    database "Total Reward State" as totalReward
    database "User Balances State" as userBalances
}

rectangle "Scallop Protocol" {
    collections "Obligations" as obligations
    component "Lending Pool" as lendingPool
    component "Reward Pool" as rewardPool
}

' Define tokens and rewards
card "USDC" as usdc
card "sSUI" as ssui
card "sScallop" as sscallop

' Define relationships and flows
user -right-> fund : "1. Deposit USDC"
fund -[#red]-> userBalances : "Update user's balance\nafter deposit"
fund -down-> fundManager : "Forward funds"
fundManager -right-> subAccounts : "2. Split into equal amounts"
subAccounts -right-> obligations : "3. Create Obligations\n(USDC as collateral)"

' Add total fund update after deposit
fund -[#red]-> totalFund : "Update total fund\nafter deposit"

obligations -[#blue]down-> lendingPool : "4. Borrow USDC"
rewardPool -[#green]-> obligations : "Earn Reward APR"

obligations -[#green]right-> fund : "5. Daily Harvest\n(sSUI + sScallop)"
fund -[#red]down-> lendingPool : "6. Swap portion of rewards\nto maintain borrowed USDC amount"

' Add total reward update after harvest and swap
fund -[#green]-> totalReward : "Update total reward\nafter harvest and swap"

' Add notes
note bottom of fund : "Smart Contract holding user deposits"
note bottom of fundManager : "Manages fund distribution"
note bottom of obligations : "Hermit owns these obligations"
note bottom of lendingPool : "Provides USDC lending"
note right of rewardPool : "Distributes sSUI and sScallop"
note right of totalFund : "Tracks total USDC\ndeposited by users"
note right of totalReward : "Tracks accumulated rewards\nafter swap operations"
note right of userBalances : "Tracks individual user\ndeposit amounts"

' Style
skinparam rectangle {
    BackgroundColor LightBlue
    BorderColor Black
}

skinparam component {
    BackgroundColor LightGreen
    BorderColor Black
}

skinparam collections {
    BackgroundColor LightYellow
    BorderColor Black
}

skinparam card {
    BackgroundColor LightGray
    BorderColor Black
}

skinparam database {
    BackgroundColor LightPink
    BorderColor Black
}

' Arrow colors
skinparam arrow {
    Color Black
}

@enduml
