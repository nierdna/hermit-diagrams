@startuml Hyperliquid Event Crawl System - MVP Component Diagram

' Style
skinparam {
    ComponentBackgroundColor LightBlue
    DatabaseBackgroundColor LightPink
    QueueBackgroundColor LightYellow
    InterfaceBackgroundColor LightGreen
    ArrowColor Black
    BorderColor Gray
}

' Components
package "Hyperliquid Ecosystem" {
    [Hyperliquid API] as API
}

package "Data Ingestion Layer" {
    [Crawler Service] as Crawler
    [Message Queue 1] as MQ1
    
    Crawler -down-> MQ1 : "Push raw events"
}

package "Data Processing Layer" {
    [Data Filter Service] as Filter
    [Message Queue 2] as MQ2
    [Data Enricher Service] as Enricher
    
    MQ1 -down-> Filter : "Consume raw events"
    Filter -down-> MQ2 : "Push filtered events"
    MQ2 -down-> Enricher : "Consume filtered events"
    Enricher -up-> API : "Request additional data"
}

package "Data Storage Layer" {
    database "Event Database" as DB
    
    Enricher -down-> DB : "Store enriched data"
}

package "Monitoring & Management" {
    [Metrics Collector] as Metrics
    [Alert Manager] as Alerts
    
    Metrics -up-> Crawler : "Monitor"
    Metrics -up-> Filter : "Monitor"
    Metrics -up-> Enricher : "Monitor"
    Metrics -right-> Alerts : "Trigger alerts"
}

' External connections
API -down-> Crawler : "Stream events"

' Notes
note right of Crawler
  Listens to Hyperliquid events
  Single instance for MVP
end note

note right of Filter
  Filters and cleans raw data
  Reduces data volume
end note

note right of Enricher
  Enriches data with additional context
  Normalizes data structure
end note

note bottom of DB
  Simple database setup
  No sharding for MVP
end note

note bottom of MQ1
  Buffers between services
  Provides basic fault tolerance
end note

@enduml 