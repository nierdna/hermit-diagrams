@startuml W-Pre-market AMM Class Diagram

' Style
skinparam class {
    BackgroundColor LightBlue
    BorderColor Black
    ArrowColor Black
}

skinparam note {
    BackgroundColor LightYellow
    BorderColor Black
}

' Classes
class WPreMarketAMM {
    - liquidityPools: Map<TokenPair, LiquidityPool>
    - isSettlementPhase: boolean
    + addLiquidity(baseToken, Pa, Pb, amount): uint256
    + removeLiquidity(lpTokens): (uint256, uint256)
    + swapBaseForWToken(baseAmount): uint256
    + swapWTokenForBase(wTokenAmount): uint256
    + getPrice(): uint256
    + getLiquidity(): uint256
    + enterSettlementPhase(): void
    + swapWTokenForToken(wTokenAmount): uint256
}

class LiquidityPool {
    - baseToken: Token
    - wToken: Token
    - baseReserve: uint256
    - wTokenReserve: uint256
    - minPrice: uint256 (Pa)
    - maxPrice: uint256 (Pb)
    - liquidity: uint256 (L)
    - lpToken: LPToken
    - feeGrowthGlobalBase: uint256
    - feeGrowthGlobalWToken: uint256
    - protocolFeePercentage: uint256
    - isSettlementPhase: boolean
    - realToken: Token
    
    + addLiquidity(baseAmount, Pa, Pb): (uint256, uint256)
    + removeLiquidity(lpTokens): (uint256, uint256)
    + swapBaseForWToken(baseAmount): uint256
    + swapWTokenForBase(wTokenAmount): uint256
    + calculateLiquidity(x, Pa, Pb): uint256
    + calculateWTokenAmount(x, Pa, Pb): uint256
    + getCurrentPrice(): uint256
    + collectFees(lpTokenId): (uint256, uint256)
    + calculateFees(lpTokenId): (uint256, uint256)
    + enterSettlementPhase(realToken): void
    + removeLiquidityInSettlement(lpTokenId, tokenAmount): (uint256, uint256)
    + swapWTokenForToken(wTokenAmount): uint256
}

class PriceCalculator {
    + calculateLiquidity(x, Pa, Pb): uint256
    + calculateWTokenAmount(x, Pa, Pb): uint256
    + calculateBaseAmount(y, Pa, Pb): uint256
    + calculateCurrentPrice(baseReserve, wTokenReserve, Pa, Pb): uint256
    + calculateSwapOutput(inputAmount, inputReserve, outputReserve, Pa, Pb): uint256
}

class TokenMinter {
    + mintWTokens(amount): Token
    + burnWTokens(amount): void
}

class Token {
    - address: Address
    - name: string
    - symbol: string
    - decimals: uint8
    - totalSupply: uint256
    
    + balanceOf(account): uint256
    + transfer(to, amount): bool
    + approve(spender, amount): bool
    + transferFrom(from, to, amount): bool
}

class LPToken {
    - pool: LiquidityPool
    - tokenId: uint256
    - owner: address
    - liquidity: uint256
    - lowerPriceBound: uint256 (Pa)
    - upperPriceBound: uint256 (Pb)
    - feeGrowthInsideLastBase: uint256
    - feeGrowthInsideLastWToken: uint256
    - tokensOwedBase: uint256
    - tokensOwedWToken: uint256
    - collateralAmount: uint256
    - initialWTokenAmount: uint256
    
    + mint(to, amount, Pa, Pb, collateral, initialWToken): void
    + burn(from, amount): void
    + collectFees(tokenId): (uint256, uint256)
    + getRequiredTokenForSettlement(tokenId): uint256
}

class User {
    - address: Address
    - baseTokenBalance: uint256
    - wTokenBalance: uint256
    - lpTokenBalance: uint256
    - tokenBalance: uint256
    
    + addLiquidity(baseAmount, Pa, Pb): void
    + removeLiquidity(lpAmount): void
    + swapBaseForWToken(baseAmount): void
    + swapWTokenForBase(wTokenAmount): void
    + removeLiquidityInSettlement(lpTokenId, tokenAmount): void
    + swapWTokenForToken(wTokenAmount): void
}

class FeeManager {
    - feePercentage: uint256
    - protocolFeePercentage: uint256
    
    + calculateSwapFee(amount): uint256
    + updateFeeGrowthGlobal(pool, feeAmount, isBase): void
    + updatePositionFees(position, pool): void
    + collectPositionFees(position): (uint256, uint256)
}

class SettlementManager {
    - isSettlementPhase: boolean
    - realToken: Token
    
    + enterSettlementPhase(realToken): void
    + calculateRequiredTokenAmount(lpTokenId): uint256
    + processLiquidityRemoval(lpTokenId, tokenAmount): (uint256, uint256)
    + swapWTokenForToken(wTokenAmount): uint256
}

' Relationships
WPreMarketAMM "1" *-- "many" LiquidityPool : contains
LiquidityPool "1" *-- "1" LPToken : issues
LiquidityPool "1" --> "1" PriceCalculator : uses
WPreMarketAMM "1" --> "1" TokenMinter : uses
WPreMarketAMM "1" --> "1" FeeManager : uses
WPreMarketAMM "1" --> "1" SettlementManager : uses
User "many" --> "1" WPreMarketAMM : interacts with
LiquidityPool "1" --> "3" Token : manages

' Notes with formulas
note right of PriceCalculator
  <b>Key Formulas:</b>
  
  <b>Liquidity:</b>
  L = x / (1/√Pa - 1/√Pb)
  
  <b>At price P:</b>
  x = L · (1/√P - 1/√Pb)
  y = L · (√P - √Pa)
  
  <b>General formula:</b>
  y = x · (√Pb - √Pa) / (1/√Pa - 1/√Pb)
end note

note bottom of LiquidityPool
  The liquidity pool maintains the bonding curve
  relationship between base token and w-token
  according to the mathematical formulas.
end note

note bottom of TokenMinter
  Creates new w-token when liquidity is added
  and burns them when liquidity is removed.
end note

note bottom of SettlementManager
  Manages the settlement phase after TGE:
  - Tracks required token amounts for LP withdrawal
  - Handles 1:1 swaps of w-token for real token
  - Ensures LP providers provide necessary tokens
end note

note bottom of LPToken
  In settlement phase:
  - LP providers must provide real tokens to withdraw
  - Required token amount = initialWTokenAmount - current w-token balance
  - Collateral is returned only after providing required tokens
end note

@enduml 