@startuml W-Pre-market AMM System

' Define participants
actor "LP Provider" as LPProvider
actor "Trader" as Trader
participant "W-Pre-market AMM" as AMM
database "Liquidity Pool" as Pool
participant "Price Calculator" as Calculator
participant "Token Minter" as Minter
participant "Fee Manager" as FeeManager
database "Fee Trackers" as FeeTrackers

' Style
skinparam sequence {
    ParticipantBackgroundColor LightBlue
    ActorBackgroundColor LightGreen
    DatabaseBackgroundColor LightPink
    LifeLineColor Gray
    BorderColor Black
}

' Define mathematical formulas as notes
note left of LPProvider
  <b>Key Formulas:</b>
  
  <b>Liquidity:</b>
  L = x / (1/√Pa - 1/√Pb)
  
  <b>At price P:</b>
  x = L · (1/√P - 1/√Pb)
  y = L · (√P - √Pa)
  
  <b>General formula:</b>
  y = x · (√Pb - √Pa) / (1/√Pa - 1/√Pb)
end note

' LP Provider Flow
group LP Provider Adds Liquidity
    LPProvider -> AMM: Add Liquidity (x base token, Pa, Pb)
    activate AMM
    
    AMM -> Calculator: Calculate liquidity parameters
    activate Calculator
    
    Calculator -> Calculator: Calculate L = x / (1/√Pa - 1/√Pb)
    Calculator -> Calculator: Calculate y = x · (√Pb - √Pa) / (1/√Pa - 1/√Pb)
    Calculator --> AMM: Return y (amount of w-token needed)
    deactivate Calculator
    
    AMM -> Minter: Request to mint y w-token
    activate Minter
    Minter --> AMM: Return newly minted w-token
    deactivate Minter
    
    AMM -> Pool: Add x base tokens + y w-token to pool
    AMM --> LPProvider: Issue LP tokens representing share of pool
    
    deactivate AMM
end

' Trader Flow - Buy w-tokens
group Trader Buys w-tokens
    Trader -> AMM: Buy w-tokens with x base tokens
    activate AMM
    
    AMM -> FeeManager: Calculate fee (e.g., 0.3% of x)
    activate FeeManager
    FeeManager --> AMM: Return fee amount
    deactivate FeeManager
    
    AMM -> Calculator: Calculate output amount (with x - fee)
    activate Calculator
    
    Calculator -> Calculator: Calculate current price based on pool ratio
    Calculator -> Calculator: Calculate output w-token based on formula
    Calculator --> AMM: Return output amount of w-token
    deactivate Calculator
    
    AMM -> Pool: Update base tokens and w-token according to formula
    
    AMM -> FeeManager: Update fee growth trackers
    activate FeeManager
    FeeManager -> FeeTrackers: Record fees for current price range
    FeeManager --> AMM: Confirm fee tracking update
    deactivate FeeManager
    
    AMM --> Trader: Send w-token to trader
    
    deactivate AMM
end

' Trader Flow - Sell w-tokens
group Trader Sells w-tokens
    Trader -> AMM: Sell y w-tokens
    activate AMM
    
    AMM -> Calculator: Calculate output amount
    activate Calculator
    
    Calculator -> Calculator: Calculate current price based on pool ratio
    Calculator -> Calculator: Calculate output base tokens based on formula
    Calculator --> AMM: Return output amount of base tokens
    deactivate Calculator
    
    AMM -> Pool: Remove base tokens and w-tokens according to formula
    AMM --> Trader: Send base tokens to trader
    
    deactivate AMM
end

' Add a new flow for fee collection
group LP Provider Collects Fees
    LPProvider -> AMM: Request to collect fees for position (LP token ID)
    activate AMM
    
    AMM -> FeeManager: Calculate uncollected fees for position
    activate FeeManager
    
    FeeManager -> FeeTrackers: Get fee growth since last collection
    FeeManager -> FeeManager: Calculate fees owed based on liquidity share
    FeeManager --> AMM: Return uncollected fees (base tokens, w-token)
    deactivate FeeManager
    
    AMM -> Pool: Withdraw fee amounts
    AMM --> LPProvider: Send collected fees (base tokens, w-token)
    
    AMM -> FeeManager: Update position's fee tracking data
    activate FeeManager
    FeeManager -> FeeTrackers: Reset tokens owed, update last fee growth
    FeeManager --> AMM: Confirm update
    deactivate FeeManager
    
    deactivate AMM
end

' Add notes
note over AMM: Automated Market Maker for pre-market tokens
note over Pool: Contains base tokens (ETH, USDC, etc.) and w-token
note over Calculator: Implements the bonding curve formulas
note over Minter: Creates new w-token when liquidity is added
note over LPProvider: Provides liquidity with base tokens and price range (Pa to Pb)
note over Trader: Trades base tokens for w-token or vice versa
note over FeeManager: Tracks and manages fee collection for LP positions
note over FeeTrackers: Stores fee growth data for each price range

@enduml 