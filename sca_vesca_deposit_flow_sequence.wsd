@startuml Hermit SCA and veSCA Deposit Flow Sequence

' Define participants
actor User
participant "Hermit Protocol" as Hermit
participant "SCA Manager" as SCAManager
participant "veSCA Manager" as vESCAManager
participant "hSCA Manager" as hSCAManager
participant "Epoch Manager" as EpochManager
participant "Scallop Protocol" as Scallop
database "User Balances State" as UserBalances
database "veSCA Lock State" as vESCALockState

' Style
skinparam sequence {
    ParticipantBackgroundColor LightBlue
    ActorBackgroundColor LightGreen
    DatabaseBackgroundColor LightPink
    LifeLineColor Gray
    BorderColor Black
}

' SCA Deposit Flow
group SCA Deposit Flow (1:1 Ratio)
    User -> Hermit: 1. Deposit SCA
    activate Hermit
    
    Hermit -> SCAManager: 2. Process SCA deposit
    activate SCAManager
    
    SCAManager -> hSCAManager: 3. Mint hSCA (1:1 ratio)
    activate hSCAManager
    
    hSCAManager -> UserBalances: 4. Update user's hSCA balance
    hSCAManager --> SCAManager: Confirm hSCA minting
    deactivate hSCAManager
    
    SCAManager -> UserBalances: 5. Record SCA deposit
    SCAManager --> Hermit: Confirm SCA processing
    deactivate SCAManager
    
    Hermit --> User: 6. Return hSCA tokens (1:1 ratio)
    deactivate Hermit
    
    note right: User receives hSCA tokens at 1:1 ratio with deposited SCA
end

' veSCA Deposit Flow
group veSCA Deposit Flow (Max Lock)
    User -> Hermit: 1. Deposit veSCA
    activate Hermit
    
    Hermit -> vESCAManager: 2. Process veSCA deposit
    activate vESCAManager
    
    vESCAManager -> Scallop: 3. Max lock veSCA (4 years)
    activate Scallop
    
    Scallop -> vESCALockState: 4. Update veSCA lock state
    Scallop --> vESCAManager: Confirm max lock
    deactivate Scallop
    
    vESCAManager -> UserBalances: 5. Record veSCA deposit with max lock
    vESCAManager --> Hermit: Confirm veSCA processing
    deactivate vESCAManager
    
    Hermit --> User: 6. Confirm veSCA max lock
    deactivate Hermit
    
    note right: veSCA is locked for maximum period (4 years)
end

' SCA Accumulation Flow
group SCA Accumulation to veSCA (Threshold: 1000 SCA)
    User -> Hermit: 1. Deposit SCA
    activate Hermit
    
    Hermit -> SCAManager: 2. Process SCA deposit
    activate SCAManager
    
    SCAManager -> UserBalances: 3. Update user's SCA balance
    
    SCAManager -> UserBalances: 4. Check if SCA balance ≥ 1000
    
    alt SCA Balance ≥ 1000
        SCAManager -> vESCAManager: 5a. Convert 1000 SCA to veSCA
        activate vESCAManager
        
        vESCAManager -> Scallop: 6. Create veSCA with max lock (4 years)
        activate Scallop
        
        Scallop -> vESCALockState: 7. Record new veSCA with max lock
        Scallop --> vESCAManager: Return veSCA
        deactivate Scallop
        
        vESCAManager -> UserBalances: 8. Update user's veSCA balance
        vESCAManager -> UserBalances: 9. Reduce SCA balance by 1000
        
        vESCAManager --> SCAManager: Confirm veSCA creation
        deactivate vESCAManager
        
        SCAManager --> Hermit: Notify SCA converted to veSCA
    else SCA Balance < 1000
        SCAManager -> hSCAManager: 5b. Mint hSCA (1:1 ratio)
        activate hSCAManager
        
        hSCAManager -> UserBalances: Update user's hSCA balance
        hSCAManager --> SCAManager: Confirm hSCA minting
        deactivate hSCAManager
        
        SCAManager --> Hermit: Notify hSCA minted
    end
    
    deactivate SCAManager
    Hermit --> User: 10. Return transaction result
    deactivate Hermit
    
    note right: When SCA accumulates to 1000, it's automatically converted to veSCA with max lock
end

' Automated veSCA Re-Max Lock Flow
group Automated veSCA Re-Max Lock (Daily Epoch)
    EpochManager -> EpochManager: 1. Daily epoch trigger
    activate EpochManager
    note right: Automated process runs once per day
    
    EpochManager -> vESCALockState: 2. Scan for veSCA locks
    activate vESCALockState
    
    vESCALockState --> EpochManager: 3. Return veSCA locks with reduced time
    deactivate vESCALockState
    
    EpochManager -> vESCAManager: 4. Request re-max lock for eligible veSCA
    activate vESCAManager
    
    loop For each eligible veSCA
        vESCAManager -> Scallop: 5. Re-max lock veSCA to 4 years
        activate Scallop
        
        Scallop -> vESCALockState: 6. Update veSCA lock period
        Scallop --> vESCAManager: 7. Confirm re-max lock
        deactivate Scallop
        
        vESCAManager -> UserBalances: 8. Update user's veSCA lock status
    end
    
    vESCAManager --> EpochManager: 9. Report re-max lock completion
    deactivate vESCAManager
    
    EpochManager -> Hermit: 10. Update protocol state
    deactivate EpochManager
    
    note right: All veSCA are automatically re-locked to maximum period (4 years) each epoch
end

' Add notes
note over Hermit: Main protocol entry point
note over SCAManager: Manages SCA deposits and conversions
note over vESCAManager: Handles veSCA creation and locking
note over hSCAManager: Mints hSCA tokens at 1:1 ratio
note over EpochManager: Manages daily epoch transitions and automated processes
note over UserBalances: Tracks user's SCA, hSCA, and veSCA balances
note over vESCALockState: Records veSCA lock periods
note over Scallop: External protocol for veSCA locking

@enduml 